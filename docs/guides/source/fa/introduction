پیشگفتار
========
ا توجه به رشد روز افزون نرم‌افزارهای رایانه‌ای و همچنین گسترش وب به عنوان بستری جهت توسعه نرم‌افزار، سرعت توسعه نرم‌افزار، با در نظر گرفتن استانداردهای توسعه و عدم کاهش کیفیت یکی از دغدغه‌های اصلی توسعه‌دهندگان و تولیدکنندگان نرم‌افزار می‌باشد.
این امر تعداد زیادی از توسعه دهندگان وب را مجاب کرده تا راه حلی برای غلبه بر این چالش بزرگ پیدا کنند.
امروزه علاوه بر میزان‌های های عمومی سنجش نرم‌افزار همچون امنیت , سرعت اجرای عملیات و... ، فاکتور تسریع در توسعه نرم افزار نیز از اهمیت ویژه‌ای برخوردار است. به گونه‌ای که بسترهای توسعه و کتابخانه ها باعث شده‌اند این استاندارد‌ها را با چاشنی سرعت در توسعه ادغام کنند و محیطی کاملاً ساده و قابل درک برای یک توسعه دهنده محیا سازند.
در این مقاله تلاش شده است نرم‌افزار فالیس به عنوان راه حلی جهت افزایش سرعت توسعه و حفظ فاکتورهای کیفی مورد بررسی قرارگیرد..

این مستند مناسب کیست
--------------------
این مستند ویژه افرادی که دانش پایه‌ای از توسعه وب سمت سرور و سمت کاربر را دارند تهیه شده اس و برای مطالعه آن به حداقل اطلاعات پایه در خصوص توسعه نرم‌افزارهای وب نیاز می‌باشد. 

فالیس چیست؟
-----------
فالیس کتابخانه ای بر پایه ی بستر رویی آن ریلز است که با به کارگیری زبان برنامه نویسی روبی و ابزارهای مدرن و پر قدرتش ، توسعه نرم افزارهای وب را برای توسعه دهندگان هموار و سریع می سازد. 
Ruby on Rails یا به اختصار RoR یک چارچوب نرم‌افزار وب متن‌باز برای زبان برنامه‌نویسی روبی می‌باشد که با قدرت خارق العاده خود توانسته دنیای توسعه وب را تغییر دهد. روبی دارای دستور زبانی ساده و شیرین است که با قابلیت های شی گرایی منحصر به فردش توانسته خیلی ها را به سمت خود جذب کند.
ریلز یک چارچوب فول استک می‌باشد بدین معنا که آن به توسعه‌دهنده قابلیت سایخت صفحات و برنامه‌هایی که

فلسفه
=====
امروزه سراسر وب پر شده است از نرم‌افزارهای کاربردی که از لحاظ پیاده‌سازی دارای تشابهات فراوانی هستند برای مثال اکثر آن‌ها دارای کاربرانی هستند، این کاربران نیاز به بخش‌های مورد نیاز خود هستند بخش‌هایی مثل صفحه ورود، صفحه تغییر کلمه عبور.
و در نتیجه توسعه‌دهندگان وب نیازمند تکرار فرایند تولید این چنین امکاناتی هستند.
یکی از راه‌های جلوگیری از این توسعه‌های تکرارپذیر استفاده از نرم‌افزارهای جامع می‌باشد به خصوص نرم‌افزارهای آزاد و متن‌باز که به راحتی در دسترس بوده و توسط تعداد زیادی توسعه در کشورهای مختلف گسترش می‌یابند.
اما این ابزارها همیشه هم باعث سریعتر شدن روال نمی‌شوند زیرا این ابزارها می‌توانند با نیاز تهایی شما تفاوت‌هایی داشته‌باشند و در نتیجه تغییر و گسترش این نرم‌افزارها می‌تواند زمان بیشتری برای توسعه ببرد.
روش دیگر برای سرعت بخشیدن به تهیه نرم‌افزار مورد نظز به کارگیری چارچوب‌ها، کتابخانه‌ها و تکه کدهای آماده می‌باشد، که روش انعطافپذیر تری به نظر می‌رسد.
اما ممکن است نتیجه آن تبدیل شود به حجم زیادی از کد‌هایی که ما به آن‌ها نیاز نداریم.
فالیس با قرارگرفتن در یک لایه بالاتر از چارچوب وب به عنوان یک فرا-چارچوب مارا یاری می کند تا با تکرار کد کمتر قابلیت‌های مورد نظر خود را پیاده سازی نمایی.

روبی چیست؟
----------
روبی (Ruby) زبان برنامه نویسی قدرتمند و پویایی است که از سال 1990 میلادی با ورود سبک جدیدی از زبان های برنامه نویسی شی گرا دنیای نرم افزاری را به خود خیره کرد. این زبان با الهام گرفتن از سینتکس زبان های پرل ، لیسپ ،پایتون و اسمالتاک توانسته سبکی را ارائه دهد که برای دوستکاران برنامه نویسی بی دردسر و شیرین باشد. شاید به جرات این زبان در شی گرایی بی همتاست و سبک مورد استفاده از آن به مراتب شیرین تر و ساده تر از رقبایش (Python , C++ , Java) است. 
روبی را یوکیهیرو ماتسوموتو (Yukihiro Matsumoto یا به اختصار Matz) ژاپونی به گونه ای ارائه داشته که پارادایم‌های گوناگون برنامه‌نویسی مانند برنامه‌نویسی تابعی، شیء گرا و بازتابی را پشتیبانی کند . این گستردگی در روبی همراه با قابلیت هایی چون متغیرهای پویا و مدیریت حافظه خودکار همراه شد و توانست خیلی از برنامه نویسان را به خود شیفته کند.

### Matz دربارهٔ انگیزه‌اش برای ساخت روبی گفته :
> در جستجوی زبانی بودم که از پایتون شیءگراتر و از پرل قدرتمندتر باشد. برای همین تصمیم گرفتم خودم آن را بسازم .
 
### او در کنفراسی در باره روبی این چنین سخن گفته : 
> روبی برای افزایش توان تولید و تفریح برنامه‌نویسان طراحی شده است و از اصل رابط کاربری خوب پیروی می‌کند. او تأکید می‌کند که طراحی سامانه‌ها باید بیشتر روی نیاز انسان‌ها متمرکز باشد تا رایانه‌ها. اغلب مردم، به ویژه برنامه‌نویسان، روی ماشین‌ها تمرکز می‌کنند. آن‌ها فکر می‌کنند "با انجام این کار ماشین‌ها سریعتر می‌شوند، ماشین‌ها در اجرا موثرتر می‌باشند و ..." آن‌ها بر ماشین تمرکز می‌کنند، اما در حقیقت ما نیاز داریم که به انسان‌ها توجه کنیم، اینکه چگونه آنها به برنامه‌نویسی توجه دارند و یا چگونه به اجرای برنامه‌های ماشین دقت می‌کنند.روبی برای تعقیب هدف کمترین غافلگیری بیان شدبه این معنی که زبان باید طوری رفتار کند که کمترین گیج‌کنندگی را برای استفاده‌کننده‌های آن داشته باشد. ماتسوموتو همچنین اظهار می‌دارد که هدف اولین طراحی او درست کردن زبانی که خودش از آن لذت ببرد بود. این کار با کم کردن کار برنامه‌نویس و ابهامات منطقی می‌باشد. اما کمترین غافلگیری هنوز خیلی به بیان زبان برنامه‌نویسی روبی نزدیک است. افراد ناشی شاید این را به این معنا تعبیر کنند که رفتارهای روبی سعی در متصل کردن اشتراکات رفتارهای دیگر زبان‌ها را دارد. در بحث ماه می ۲۰۰۵ در روزنامه "کامپ. لنگ. روبی" ماکسوموتو تلاش کرد که روبی را از مینیمم غافلگیری دور کند. توضیح اینکه هر شانس طراحی بعضی‌ها را متعجب می‌کند. او از استاندارد خود برای ارزیابی غافلگیری استفاده کرد. ماتسوموتو این را در یک گزارش مطرح ساخت. "همه یک پیشینه شخصی دارند، بعضی‌ها از جانب پایتون می‌آیند بعضی‌های دیگه از پرل و آن‌ها ممکن است از بعضی از جنبه‌های متفاوت زبان غافلگیر شوند. سپس آن‌ها به من می‌گویند ما از بعضی از جنبه‌های زبان غافلگیر شدیم، بنابرین روبی قانون کمترین غافلگیری را زیر پا گذاشته است. صبر کنید... هدف کمترین غافلگیری فقط برای شما نیست. این هدف به معنای کمترین غافلگیری ممکن برای بیان من می‌باشد. این به معنای کمترین غافلگیری بعد از آموزش کامل زبان است. برای مثال من قبل از اینکه روبی را طراحی کنم یک برنامه‌نویس سی‌پلاس‌پلاس بودم. من منحصراً دو، سه سال در سی‌پلاس‌پلاس برنامه نوشتم و بعد از دو سال برنامه‌نویسی با آن، هنوز مرا متعجب می‌کرد.
